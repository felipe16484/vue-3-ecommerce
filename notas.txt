# Notas y Apuntes Generales del Curso

-> Componentes

    - Estado: el estado de un componente se refiere a los datos y valores que el componente mantiene y utiliza para representar su estado interno. El estado puede incluir variables, objetos, arreglos, y cualquier otra información que afecte al comportamiento y la apariencia del componente.
    - Indicarle "contexto" a los atributos de los componentes: se est� manejando un componente <v-card> y para este, necesito darle un t�tulo, para ello se utiliza el atributo title="Card title", pero si necesito pasarle una variable y que el atributo no me compile eso como un texto literal, se le agrega ':' al nombre del atributo para indicarle a este que lo que va a recibir lo tome como c�digo JS, as� :title='objeto.atributo'.
    - Cuando estamos haciendo uso de una directiva v-for, se recomienda que cada item sea único, para ello debemos indicar una :key="" indicando cuál es el valor que hace único a cada item


-> Uso de TypeScript dentro de los componentes:

    - En el ejemplo de esta aplicación, se da el caso de que se debe utilizar 'TS' dentro de un componente hijo inicialmente. Lo que se debe hacer para completar todo el correcto proceso es lo siguiente:
        -- Definir dentro o fuera 

-> Uso de Options API y Composition API:
    
    - Se definene como el tipo de enfoque organizacional y lógico que pasará a tener un componente:
 



    -- Options API:

    --- Estructura básica:

        export default {
            data() {
                return {
                    message: 'Hola, Vue.js!',
                };
            },
            methods: {
                saludar() {
                    alert(this.message);
                },
            },
        };

    --- Emitir y Escuchar (Emmiting & Listening) Eventos: la principal lógica de ésto es que entre componentes padres e hijos, pueden transmitirse información, pueden emitir y escuchar eventos. Este proceso se realiza inicialmente por medio del hijo, que en su "export default" debe inicialmente indicar el método que va a emitir, pero ésto hace referencia a mandarle al padre lo que quiere hacer cuando existe una interacción por parte del usuario con la interfaz del componente hijo. Se debe crear, en el export default, una propiedad 'emits' la cual dentro de un array se indica el evento que se emite y, de igual forma, otro objeto 'methods' que indicará los métodos que se ejecutarán dentro del componente hijo. Para este caso, se define un método con el cual el usuario interactuó, por ejemplo, darle click a un botón. Se define el método que va a escuchar esta interacción y dentro de él se indica que va a emitir un evento "this.$emit('addProduct')" así.
    Posterior a ello, en el componente padre, se debe indicar "@event_name" en la etiqueta del componenete hijo que se va a escuchar un evento el cual debe tener el mismo nombre del evento que está emitiendo el mismo, e indicar dentro de él qué método se va a ejecutar y allí mismo indicar los parámetros que se le pasaran, para, finalmente, ejecutar el un método que se encuentra dentro del objeto 'methods' con la lógica necesaria para el caso.
        -> Componente hijo:

            export default {
                props: {
                    product: {
                        type: Object as PropType<Product>,
                        required: true
                    }
                },
                emits:['addProduct'],
                methods:{
                    onButtonClick(){
                        this.$emit('addProduct')
                    }
                }
            }

            <p>Nombre: {{ product.name }}</p>
            <p>Precio: {{ product.price }}</p>
            <button @click="onButtonClick">
                Agregar al carrito
            </button>

        -> Componente padre:

            export default {
                components: { 
                    ProductCard 
                },
                data() {
                    return {
                        products: <Array<Product>>[
                            { name: "Silla", price: 67, id: 5},
                            { name: "Monitor", price: 450, id:  8},
                            { name: "Miocrófono", price: 555, id:  2}
                        ]
                    }
                },
                methods:{
                    onProductAdded(productId: number){
                        console.log('Agregar producto '+ productId);
                    }
                }
            }

            <ProductCard v-for="p in products" 
                    :product="p"
                    @addProduct="onProductAdded(p.id)"/>

    

    




    -- Composition API:

    --- Estructura básica:

        export default {
            setup() {
                // Estado local
                const message = ref('Hola, Vue.js!');

                // Función
                function saludar() {
                    alert(message.value);
                }

                // Propiedad computada
                const mensajeEnMayusculas = computed(() => message.value.toUpperCase());

                // Devolver datos y funciones que se utilizan en el componente
                return {
                    message,
                    saludar,
                    mensajeEnMayusculas,
                };
            }
        };
    
    --- Cuando se trabaja con Composition API, se debe incluir la propiedad "setup" en la etiqueta "script" y el lenguaje en el que se va a trabajar en el documento "ts".
       
    <script setup lang="ts"> 
    </script>

    --- Para poder modificar el valor de una variable de estado se debe colocar "nomVariable.value" para hacer referencia que se va a modificar el valor.

    


-> Hooks:

    - Son bloques de código que podemos ejecutar a lo largo del ciclo de vida de nuestro componente.

    -- mounted(): se utiliza para implementar lógica sobre el componene al momento de la creación del mismo.



-> Pinia:

    - Posee una particularidad al igual que el mismo Vue, y es que también posee 2 posibilidades de API. 
        
        - Options: se puede definir un store con su respectivo estado, getters y actions:

        export const useCounterStore = defineStore('counter', {
            state: () => ({ count: 0, name: 'Eduardo' }),
            getters: {
                doubleCount: (state) => state.count * 2,
            },
            actions: {
                increment() {
                this.count++
                },
            },
        })

        - Composition: se puede pasar en una función que define propiedades y métodos reactivos y retornan un objeto con estos mismos que queremos exponer (en esta sintaxis no está explícito lo que va a hacer cada parte del store, se sobreentiende lo que hace cada línea de código):
            
            - Las variables de estado se deben definir utilizando la función "ref()".
            - Los getters se definen por medio de la función "computed()".
            - Los actions son funciones que modifican el estado.

        export const useCounterStore = defineStore('counter', () => {
            const count = ref(0)
            const name = ref('Eduardo')
            const doubleCount = computed(() => count.value * 2)
            function increment() {
                count.value++
            }

            return { count, name, doubleCount, increment }
        })